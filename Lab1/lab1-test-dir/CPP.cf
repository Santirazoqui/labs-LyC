PDefs.   Program ::= [Def] ;

DFun.     Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DInline.  Def    ::= "inline" Type Id "(" [Arg] ")" "{" [Stm] "}" ;
DInlineP. Def    ::= "inline" Type Id "(" [Arg] ")" ";" ;
DProto.   Def    ::= Type Id "(" [Arg] ")" ";" ;

terminator Def "" ;

AEmptyDecl.     Arg    ::= Type ;
ADecl.          Arg    ::= Type Id ;
ADeclInit.      Arg    ::= Type Id "=" Exp ;

separator Arg "," ;

SEmpty.      Stm ::= ";" ;
SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Type [Id] ";" ;
SInit.       Stm ::= Type Id "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

terminator Stm "" ;

ETrue.   Exp16  ::= "true" ;
EFalse.  Exp16  ::= "false" ;
EInt.    Exp16  ::= Integer ;
EDouble. Exp16  ::= Double ;
EString. Exp16  ::= [String] ; --Permite salto de lineas
separator nonempty String "" ;
EId.     Exp16  ::= Id ; 

EApp.    Exp15  ::= Id "(" [Exp] ")" ;

EMemberAccess.  Exp14  ::= Exp14 "." Exp15 ;
EPointerAccess. Exp14  ::= Exp14 "->" Exp15 ;
EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;

ELShift. Exp10  ::= Exp10 "<<" Exp11 ;
ERShift. Exp10  ::= Exp10 ">>" Exp11 ;

ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3 "=" Exp2 ;

internal ETyped. Exp16 ::= "(" Exp ":" Type ")" ;
coercions Exp 16 ;
separator Exp "," ;

--template instantiation
TemplateInstantiation. TempInst ::= Id "<" [Type] ">" ; --me agrego un shift/reduce

rules Type3     ::= "bool" | "int" | "double" | "void" | "string" ;
rules Type2     ::= Type3 | TempInst ;
rules Type1     ::= Type2 | Type2 "&" ;
rules Type      ::= Type1 | "const" Type1 ;
separator nonempty Type "," ;

token Id (letter (letter | digit | '_')*) ;

separator nonempty Id "," ;

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
comment "using" ;
