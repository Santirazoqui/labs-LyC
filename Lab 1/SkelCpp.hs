-- File generated by the BNF Converter (bnfc 2.9.6.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -Wno-unused-matches #-}

module SkelCpp where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsCpp

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: AbsCpp.Id -> Result
transId x = case x of
  AbsCpp.Id string -> failure x

transProgram :: AbsCpp.Program -> Result
transProgram x = case x of
  AbsCpp.PDefs defs -> failure x

transBody :: AbsCpp.Body -> Result
transBody x = case x of
  AbsCpp.Body1 stms -> failure x
  AbsCpp.Body2 -> failure x

transDef :: AbsCpp.Def -> Result
transDef x = case x of
  AbsCpp.DFun type_ id args body -> failure x
  AbsCpp.DInlineFun type_ id args body -> failure x

transArg :: AbsCpp.Arg -> Result
transArg x = case x of
  AbsCpp.AEmptyDecl type_ -> failure x
  AbsCpp.ADecl type_ id -> failure x
  AbsCpp.ADeclInit type_ id exp -> failure x

transStm :: AbsCpp.Stm -> Result
transStm x = case x of
  AbsCpp.SEmpty -> failure x
  AbsCpp.SExp exp -> failure x
  AbsCpp.SDecls type_ ids -> failure x
  AbsCpp.SInit type_ id exp -> failure x
  AbsCpp.SReturn exp -> failure x
  AbsCpp.SReturnVoid -> failure x
  AbsCpp.SWhile exp stm -> failure x
  AbsCpp.SBlock stms -> failure x
  AbsCpp.SIfElse exp stm1 stm2 -> failure x

transExp :: AbsCpp.Exp -> Result
transExp x = case x of
  AbsCpp.ETrue -> failure x
  AbsCpp.EFalse -> failure x
  AbsCpp.EInt integer -> failure x
  AbsCpp.EDouble double -> failure x
  AbsCpp.EString strings -> failure x
  AbsCpp.EId id -> failure x
  AbsCpp.EApp id exps -> failure x
  AbsCpp.EMemberAccess exp1 exp2 -> failure x
  AbsCpp.EPointerAccess exp1 exp2 -> failure x
  AbsCpp.EPIncr exp -> failure x
  AbsCpp.EPDecr exp -> failure x
  AbsCpp.EIncr exp -> failure x
  AbsCpp.EDecr exp -> failure x
  AbsCpp.ETimes exp1 exp2 -> failure x
  AbsCpp.EDiv exp1 exp2 -> failure x
  AbsCpp.EPlus exp1 exp2 -> failure x
  AbsCpp.EMinus exp1 exp2 -> failure x
  AbsCpp.ELShift exp1 exp2 -> failure x
  AbsCpp.ERShift exp1 exp2 -> failure x
  AbsCpp.ELt exp1 exp2 -> failure x
  AbsCpp.EGt exp1 exp2 -> failure x
  AbsCpp.ELtEq exp1 exp2 -> failure x
  AbsCpp.EGtEq exp1 exp2 -> failure x
  AbsCpp.EEq exp1 exp2 -> failure x
  AbsCpp.ENEq exp1 exp2 -> failure x
  AbsCpp.EAnd exp1 exp2 -> failure x
  AbsCpp.EOr exp1 exp2 -> failure x
  AbsCpp.EAss exp1 exp2 -> failure x
  AbsCpp.ETyped exp type_ -> failure x

transTempInst :: AbsCpp.TempInst -> Result
transTempInst x = case x of
  AbsCpp.TemplateInstantiation id types -> failure x

transType :: AbsCpp.Type -> Result
transType x = case x of
  AbsCpp.Type3_bool -> failure x
  AbsCpp.Type3_int -> failure x
  AbsCpp.Type3_double -> failure x
  AbsCpp.Type3_void -> failure x
  AbsCpp.Type3_string -> failure x
  AbsCpp.Type2Type3 type_ -> failure x
  AbsCpp.Type2TempInst tempinst -> failure x
  AbsCpp.Type1Type2 type_ -> failure x
  AbsCpp.Type11 type_ -> failure x
  AbsCpp.TypeType1 type_ -> failure x
  AbsCpp.Type1 type_ -> failure x
