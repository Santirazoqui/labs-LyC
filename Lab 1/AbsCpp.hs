-- File generated by the BNF Converter (bnfc 2.9.6.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Cpp.

module AbsCpp where

import Prelude (Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = PDefs [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Body = Body1 [Stm] | Body2
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = DFun Type Id [Arg] Body | DInlineFun Type Id [Arg] Body
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = AEmptyDecl Type | ADecl Type Id | ADeclInit Type Id Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = SEmpty
    | SExp Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SReturn Exp
    | SReturnVoid
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EString [String]
    | EId Id
    | EApp Id [Exp]
    | EMemberAccess Exp Exp
    | EPointerAccess Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ELShift Exp Exp
    | ERShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ETyped Exp Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TempInst = TemplateInstantiation Id [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = Type3_bool
    | Type3_int
    | Type3_double
    | Type3_void
    | Type3_string
    | Type2Type3 Type
    | Type2TempInst TempInst
    | Type1Type2 Type
    | Type11 Type
    | TypeType1 Type
    | Type1 Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

